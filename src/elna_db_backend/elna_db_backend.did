type Error = variant {
  UniqueViolation;
  DimensionMismatch;
  NotFound;
  Unauthorized;
};
type RequestRecord = record {
  vector : vec float32;
  data : text;
};
type RequestSearchResult = record {
  id : nat32;
  distance : float32;
  data : text;
};
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : vec principal; Err : Error };
type Result_2 = variant { Ok : vec text; Err : Error };
type Result_3 = variant { Ok : vec RequestSearchResult; Err : Error };
service : (principal) -> {
  create_collection : (text, nat64) -> (Result);
  delete_collection : (text) -> (Result);
  get_collections : () -> (Result_2) query;
  insert: (text, vec vec RequestRecord) -> (Result);
  search : (text, vec float32, nat32) -> (Result_3) query;
  remove_admin : (principal) -> (Result);
}
